# -*- coding: utf-8 -*-
"""SDV trial

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-yA8sCEP-Br0Aza6c8wGTGFWJsmVhDrX
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

#data set
# Download the training dataset
!wget https://raw.githubusercontent.com/defcom17/NSL_KDD/master/KDDTrain+.txt

# Download the testing dataset
!wget https://raw.githubusercontent.com/defcom17/NSL_KDD/master/KDDTest+.txt

# Load training and test data
train_data = pd.read_csv('KDDTrain+.txt', header=None, delimiter=',')
test_data = pd.read_csv('KDDTest+.txt', header=None, delimiter=',')

# Assign column names
columns = ["duration", "protocol_type", "service", "flag", "src_bytes", "dst_bytes",
           "land", "wrong_fragment", "urgent", "hot", "num_failed_logins",
           "logged_in", "num_compromised", "root_shell", "su_attempted",
           "num_root", "num_file_creations", "num_shells", "num_access_files",
           "num_outbound_cmds", "is_host_login", "is_guest_login", "count",
           "srv_count", "serror_rate", "srv_serror_rate", "rerror_rate",
           "srv_rerror_rate", "same_srv_rate", "diff_srv_rate",
           "srv_diff_host_rate", "dst_host_count", "dst_host_srv_count",
           "dst_host_same_srv_rate", "dst_host_diff_srv_rate",
           "dst_host_same_src_port_rate", "dst_host_srv_diff_host_rate",
           "dst_host_serror_rate", "dst_host_srv_serror_rate",
           "dst_host_rerror_rate", "dst_host_srv_rerror_rate", "label"]

# Drop the last column if it is unnecessary
train_data = train_data.iloc[:, :-1]  # Remove the extra column
test_data = test_data.iloc[:, :-1]    # Apply to the test dataset as well

train_data.columns = columns
test_data.columns = columns

# Combine train and test data for preprocessing
data = pd.concat([train_data, test_data], ignore_index=True)

# Encode categorical features
for column in ["protocol_type", "service", "flag"]:
    encoder = LabelEncoder()
    data[column] = encoder.fit_transform(data[column])

# Map labels to binary: 'normal' = 0 (Benign), others = 1 (Malicious)
data['label'] = data['label'].apply(lambda x: 0 if x == 'normal' else 1)

# Split features and labels
X = data.drop("label", axis=1)
y = data["label"]

# Standardize the feature data
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build a sequential model
model = Sequential([
    Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    Dropout(0.3),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(1, activation='sigmoid')  # Output layer for binary classification
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Display model summary
model.summary()

# Train the model
history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=32, verbose=1)

# Evaluate the model on test data
loss, accuracy = model.evaluate(X_test, y_test, verbose=0)
print(f"Test Accuracy: {accuracy:.2f}")

# Predictions
y_pred = (model.predict(X_test) > 0.5).astype("int32")

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Benign", "Malicious"], yticklabels=["Benign", "Malicious"])
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix")
plt.show()

# Classification Report
print(classification_report(y_test, y_pred, target_names=["Benign", "Malicious"]))

y_test = y_test.to_numpy()

# Select a batch of 10 samples from the test set
batch_samples = X_test[:10]  # First 10 samples
batch_true_labels = y_test[:10]  # First 10 corresponding labels

# Predict the labels for the batch
batch_predictions = model.predict(batch_samples)
batch_predicted_labels = (batch_predictions > 0.5).astype(int)

for i in range(len(batch_samples)):
    print(f"Sample {i+1}:")
    print(f"  True Label: {'Malicious' if batch_true_labels[i] == 1 else 'Benign'}")
    print(f"  Predicted Label: {'Malicious' if batch_predicted_labels[i][0] == 1 else 'Benign'}")
    print(f"  Confidence Score: {batch_predictions[i][0]:.2f}")

"""# **git**"""

!git init

!git config --global user.name "guru_prashanth"
!git config --global user.email "guruprashanthmedasani@gmail.com"

!git remote add origin https://github.com/guruprashanth2004/Network-Intrusion-Detection-Using-NSL-KDD.git

# Commented out IPython magic to ensure Python compatibility.
# %%writefile sdv.py

!git add .

!git commit -m "code commit"

!git push https://github.com/guruprashanth2004/Network-Intrusion-Detection-Using-NSL-KDD.git

!git branch -a